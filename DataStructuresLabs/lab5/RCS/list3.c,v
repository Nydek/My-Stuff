head	1.5;
access;
symbols;
locks;
comment	@ * @;


1.5
date	2013.11.03.23.30.32;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.11.03.23.17.20;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.11.03.23.16.41;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.11.03.23.04.18;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.11.03.22.37.22;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: list3.c,v 1.4 2013-11-03 15:17:20-08 - - $

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct node node;
struct node {
   char *word;
   node *link;
};

int main (int argc, char **argv) {
   node *head = NULL;
   for (int argi = 0; argi < 5; ++argi) {
      node *node = malloc (sizeof (struct node));
      assert (node != NULL);
      node->word = argv[argi];
      node->link = head;
      head = node;
   }
   for (node *curr = head; curr->link != NULL; curr = curr->link) {
      printf ("%p->node {word=%p->[%s], link=%p}\n",
              curr, curr->word, curr->word, curr->link);
   }
   return 9;
}
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: list3.c,v 1.3 2013-11-03 15:16:41-08 - - $
d14 1
a14 1
   node *head;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: list3.c,v 1.2 2013-11-03 15:04:18-08 - - $
d18 2
a19 2
      node->word = &argv[argi];
      node->link = &head;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: list2.c,v 1.2 2013-11-03 14:57:06-08 - - $
d18 2
a19 2
      node->word = argv[argi];
      node->link = head;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: list2.c,v 1.1 2013-11-03 14:29:33-08 - - $
d5 1
@
