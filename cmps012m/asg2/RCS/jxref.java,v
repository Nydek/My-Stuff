head	1.22;
access;
symbols;
locks;
comment	@# @;


1.22
date	2013.10.24.21.12.46;	author -;	state -;
branches;
next	1.21;

1.21
date	2013.10.23.09.08.56;	author -;	state -;
branches;
next	1.20;

1.20
date	2013.10.23.09.08.06;	author -;	state -;
branches;
next	1.19;

1.19
date	2013.10.23.09.07.12;	author -;	state -;
branches;
next	1.18;

1.18
date	2013.10.23.09.06.52;	author -;	state -;
branches;
next	1.17;

1.17
date	2013.10.23.09.04.22;	author -;	state -;
branches;
next	1.16;

1.16
date	2013.10.23.09.03.12;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.10.23.08.59.56;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.10.23.08.58.29;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.10.23.08.56.20;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.10.23.08.37.57;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.10.23.08.25.37;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.10.23.08.22.49;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.10.23.08.22.21;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.10.23.08.20.55;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.10.23.08.20.11;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.10.23.08.18.41;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.10.23.07.19.56;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.10.23.07.04.28;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.10.23.07.01.47;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.10.23.04.54.23;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.10.23.04.54.08;	author -;	state -;
branches;
next	;


desc
@@


1.22
log
@-
@
text
@// $Id: jxref.java,v 1.21 2013-10-23 02:08:56-07 - - $

import java.io.*;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static java.lang.System.*;

class jxref {
   private static final String STDIN_FILENAME = "-";
   private static final String REGEX = "\\w+([-'.:/]\\w+)*";
   private static final Pattern PATTERN = Pattern.compile(REGEX);

   private static void xref_file (String filename, Scanner file){
      listmap map = new listmap();
      //Prints out the file name for each file before they are sorted.
      System.out.println("::::::::::::::::::::::::::::::::");
      System.out.println(filename);
      System.out.println("::::::::::::::::::::::::::::::::");
      //Goes through each line of the file, takes words and puts them
      //in map. map.insert sorts the words
      for (int linenr = 1; file.hasNextLine(); ++linenr) {
         String line = file.nextLine();
         Matcher match = PATTERN.matcher (line);
         while (match.find()) {
            String word = match.group();
            map.insert(word, linenr);
         }
      }
      //Prints out words in ascending lexicographic order from top
      //to bottom. It will also print the number of times the word
      //appears, and the lines on which it appears.
      for (Entry<String, intqueue> entry: map) {
         Iterator<Integer> i = entry.getValue().iterator();
         System.out.print (entry.getKey() + " [" + 
              entry.getValue().getcount() + "]");
         for(int count = entry.getValue().getcount(); count > 0;
                                                        count--){
              System.out.print (" " + i.next());
         }
         System.out.println();
      }
   }

   // For each filename, open the file, cross reference it,
   // and print.
   private static void xref_filename (String filename) {
      if (filename.equals (STDIN_FILENAME)) {
         xref_file (filename, new Scanner (System.in));
      }else {
         try {
            Scanner file = new Scanner (new File (filename));
            xref_file (filename, file);
            file.close();
         }catch (IOException error) {
            misc.warn (error.getMessage());
         }
      }
   }

   // Main function scans arguments to cross reference files.
   public static void main (String[] args) {
      if (args.length == 0) {
         xref_filename (STDIN_FILENAME);
      }else {
         for (String filename: args) {
            xref_filename (filename);
         }
      }
      exit (misc.exit_status);
   }

}

@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.20 2013-10-23 02:08:06-07 - - $
d19 1
d23 2
d33 3
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.19 2013-10-23 02:07:12-07 - - $
d32 2
a33 2
         System.out.print (entry.getKey() + " " + 
              entry.getValue().getcount());
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.18 2013-10-23 02:06:52-07 - - $
d32 1
a32 1
         System.out.println (entry.getKey() + " " + 
d38 1
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.17 2013-10-23 02:04:22-07 - - $
d36 1
a36 1
              System.out.println (" " + i.next());
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.16 2013-10-23 02:03:12-07 - - $
d32 2
a33 1
         misc.trace (entry.getKey(), entry.getValue().getcount());
d36 1
a36 1
              misc.trace (i.next());
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.15 2013-10-23 01:59:56-07 - - $
a17 1
      misc.trace ("filename", filename);
d19 3
a23 3
         System.out.println("::::::::::::::::::::::::::::::::");
         System.out.println(filename);
         System.out.println("::::::::::::::::::::::::::::::::");
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.14 2013-10-23 01:58:29-07 - - $
d22 3
a24 1
         System.out.println(filename + " " + linenr + " " + line);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.13 2013-10-23 01:56:20-07 - - $
d22 1
a22 1
         printf("%s %d %s", filename, linenr, line);
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.12 2013-10-23 01:37:57-07 - - $
d22 1
a22 1
         printf("%s %d %s",filename, linenr, line);
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.11 2013-10-23 01:25:37-07 - - $
d22 1
a22 1
         misc.trace (filename, linenr, line);
a38 1

@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.10 2013-10-23 01:22:49-07 - - $
d30 1
d34 1
a34 1
              misc.trace (entry.getValue().iterator().next());
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.9 2013-10-23 01:22:21-07 - - $
d30 1
a30 2
         misc.trace ("STUB", entry,
                     entry.getKey(), entry.getValue().getcount());
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.8 2013-10-23 01:20:55-07 - - $
d34 1
a34 1
              misc.trace (entry.getValue().interator().next());
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.7 2013-10-23 01:20:11-07 - - $
d34 1
a34 1
              misc.trace (entry.getValue().next());
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.6 2013-10-23 01:18:41-07 - - $
d34 1
a34 1
              misc.trace (entry.intqueue.next());
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.5 2013-10-23 00:19:56-07 - - $
d34 1
a34 1
              misc.trace (entry.getValue().next());
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.4 2013-10-23 00:04:28-07 - - $
d32 4
a35 1
         //FIXMW
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.3 2013-10-23 00:01:47-07 - - $
d31 1
a31 1
                     entry.getKey(), entry.getValue());
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.2 2013-10-22 21:54:23-07 - - $
d26 1
a26 1
           // map.insert(word, linenr);
d32 1
a32 1
         //FIXME
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.1 2013-10-22 21:54:08-07 - - $
d26 1
a26 1
            map.insert(word, linenr);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.8 2013-10-16 17:10:32-07 - - $
d26 1
a26 1
            listmap.insert(word, linenr);
@
