head	1.39;
access;
symbols;
locks;
comment	@ * @;


1.39
date	2013.11.17.09.20.14;	author -;	state -;
branches;
next	1.38;

1.38
date	2013.11.17.09.09.13;	author -;	state -;
branches;
next	1.37;

1.37
date	2013.11.17.08.55.26;	author -;	state -;
branches;
next	1.36;

1.36
date	2013.11.17.08.54.44;	author -;	state -;
branches;
next	1.35;

1.35
date	2013.11.17.08.49.17;	author -;	state -;
branches;
next	1.34;

1.34
date	2013.11.17.08.49.04;	author -;	state -;
branches;
next	1.33;

1.33
date	2013.11.17.08.48.50;	author -;	state -;
branches;
next	1.32;

1.32
date	2013.11.17.08.47.12;	author -;	state -;
branches;
next	1.31;

1.31
date	2013.11.17.08.46.01;	author -;	state -;
branches;
next	1.30;

1.30
date	2013.11.17.08.45.45;	author -;	state -;
branches;
next	1.29;

1.29
date	2013.11.17.08.43.39;	author -;	state -;
branches;
next	1.28;

1.28
date	2013.11.17.08.34.37;	author -;	state -;
branches;
next	1.27;

1.27
date	2013.11.17.08.32.16;	author -;	state -;
branches;
next	1.26;

1.26
date	2013.11.17.08.32.04;	author -;	state -;
branches;
next	1.25;

1.25
date	2013.11.17.08.31.34;	author -;	state -;
branches;
next	1.24;

1.24
date	2013.11.17.08.29.34;	author -;	state -;
branches;
next	1.23;

1.23
date	2013.11.17.08.24.22;	author -;	state -;
branches;
next	1.22;

1.22
date	2013.11.17.08.19.28;	author -;	state -;
branches;
next	1.21;

1.21
date	2013.11.17.08.17.37;	author -;	state -;
branches;
next	1.20;

1.20
date	2013.11.17.08.15.40;	author -;	state -;
branches;
next	1.19;

1.19
date	2013.11.17.08.12.45;	author -;	state -;
branches;
next	1.18;

1.18
date	2013.11.17.08.11.20;	author -;	state -;
branches;
next	1.17;

1.17
date	2013.11.17.08.09.10;	author -;	state -;
branches;
next	1.16;

1.16
date	2013.11.17.08.07.37;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.11.17.08.06.23;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.11.17.08.04.49;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.11.17.08.02.21;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.11.17.07.53.04;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.11.17.07.49.34;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.11.17.07.48.31;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.11.17.07.46.21;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.11.17.07.45.50;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.11.17.07.45.06;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.11.17.07.44.17;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.11.17.07.44.03;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.11.17.07.43.35;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.11.17.07.43.20;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.11.17.07.39.50;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.11.17.07.38.25;	author -;	state -;
branches;
next	;


desc
@@


1.39
log
@-
@
text
@// $Id: queue.c,v 1.38 2013-11-17 01:09:13-08 - - $
//
// Peter Greer-Berezovsky pbgreerb
//
// NAME
//   queue
//
// SYNOPSIS
//   Contains type definitions for queue and functions pertaining 
//   to the queue structure.

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "queue.h"

#define STUBPRINTF(...) fprintf (stderr, __VA_ARGS__);

typedef struct queue_node queue_node;
struct queue_node {
   queue_item_t item;
   queue_node *link;
};

struct queue {
   queue_node *front;
   queue_node *rear;
};

//Creates and returns a new queue containing nothing.

queue *new_queue (void) {
   queue *newQueue = malloc(sizeof(queue));
   assert(newQueue != NULL);
   newQueue->front = NULL;
   newQueue->rear = NULL;
   return newQueue;
}

//Frees a queue from memory.

void free_queue (queue *this) {
   assert (isempty_queue (this));
   free (this);
}

//Takes in a queue item to be stored and a queue to store it to.
//Creates a new node, stores the given item in the node, and then
//places the node at the rear of the list.

void insert_queue (queue *this, queue_item_t item) {
   assert(this != NULL);
   queue_node *newNode = malloc(sizeof(queue_node));
   assert(newNode != NULL);
   newNode->item = item;
   newNode->link = NULL;
   if(this->front == NULL){
      this->front = newNode;
   } else {
      this->rear->link = newNode;
   }
   this->rear = newNode;
}

//Removes a queue node and returns the pointer to the value it stored.

queue_item_t remove_queue (queue *this) {
   assert (! isempty_queue (this));
   queue_item_t frontItem = this->front->item;
   queue_node *remover = this->front;
   this->front = this->front->link;
   free(remover);
   
   return frontItem;
}

// Will return true if the queue contains no nodes, or false if the
// queue does contain nodes.

bool isempty_queue (queue *this) {
   assert (this != NULL);
   if(this->front == NULL){
      return true;
   }
   return false;
}
@


1.38
log
@-
@
text
@d1 10
a10 1
// $Id: queue.c,v 1.37 2013-11-17 00:55:26-08 - - $
d32 2
d42 2
d49 4
d67 2
d79 3
@


1.37
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.36 2013-11-17 00:54:44-08 - - $
a54 1
   //free(remover->item);
@


1.36
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.35 2013-11-17 00:49:17-08 - - $
d24 5
a28 5
   queue *queue = malloc(sizeof(queue));
   assert(queue != NULL);
   queue->front = NULL;
   queue->rear = NULL;
   return queue;
@


1.35
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.34 2013-11-17 00:49:04-08 - - $
d24 5
a28 5
   queue *newQueue = malloc(sizeof(queue));
   assert(newQueue != NULL);
   newQueue->front = NULL;
   newQueue->rear = NULL;
   return newQueue;
@


1.34
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.33 2013-11-17 00:48:50-08 - - $
d25 1
a25 1
   assert(queue != NULL);
@


1.33
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.32 2013-11-17 00:47:12-08 - - $
d28 1
a28 1
   return queue;
@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.31 2013-11-17 00:46:01-08 - - $
d24 1
a24 1
   queue *queue = malloc(sizeof(queue));
d26 2
a27 2
   //queue->front = NULL;
   //queue->rear = NULL;
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.30 2013-11-17 00:45:45-08 - - $
d26 2
a27 2
   queue->front = NULL;
   queue->rear = NULL;
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.29 2013-11-17 00:43:39-08 - - $
d38 1
a38 1
   queue_node *newNode = malloc(sizeof(struct queue_node));
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.28 2013-11-17 00:34:37-08 - - $
d38 1
a38 1
   queue_node *newNode = malloc(sizeof(queue_node));
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.27 2013-11-17 00:32:16-08 - - $
d26 2
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.26 2013-11-17 00:32:04-08 - - $
d53 1
a53 1
   free(remover->item);
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.25 2013-11-17 00:31:34-08 - - $
d50 1
a50 1
   queue_item_t *frontItem = this->front->item;
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.24 2013-11-17 00:29:34-08 - - $
d36 1
a36 1
   queue_node newNode = malloc(sizeof(queue_node));
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.23 2013-11-17 00:24:22-08 - - $
d36 1
a36 1
   queue_node *newNode = malloc(sizeof(queue_node));
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.22 2013-11-17 00:19:28-08 - - $
d50 1
a50 1
   queue_item_t frontItem = this->front->*item;
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.21 2013-11-17 00:17:37-08 - - $
d50 1
a50 1
   queue_item_t frontItem = *this->front->item;
d54 1
a54 1
   free (remover);
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.20 2013-11-17 00:15:40-08 - - $
d50 1
a50 1
   queue_item_t frontItem = this->front->item;
d53 1
a53 1
   //free(remover->item);
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.19 2013-11-17 00:12:45-08 - - $
d53 1
a53 1
   free(remover->item);
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.18 2013-11-17 00:11:20-08 - - $
d51 5
a55 9
   if(this->rear == this->front){
      free(this->front->item);
      free(this->front);
   } else {
      queue_node *remover = this->front;
      this->front = this->front->link;
      free(remover->item);
      free (remover);
   }
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.17 2013-11-17 00:09:10-08 - - $
d24 1
a24 1
   queue *queue = malloc(sizeof(struct queue));
d36 1
a36 1
   queue_node *newNode = malloc(sizeof(struct queue_node));
d44 1
a44 1
      }
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.16 2013-11-17 00:07:37-08 - - $
a41 1
      this->rear = newNode;
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.15 2013-11-17 00:06:23-08 - - $
d42 1
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.14 2013-11-17 00:04:49-08 - - $
d35 1
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.13 2013-11-17 00:02:21-08 - - $
d63 1
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.12 2013-11-16 23:53:04-08 - - $
d51 1
d56 1
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.11 2013-11-16 23:49:34-08 - - $
d25 1
d36 1
d38 1
a40 2
      this->rear = newNode;
      return;
a42 1
      this->rear = newNode;
d44 1
d50 1
a50 2
   if(this->front == NULL){
   }else if(this->rear == this->front){
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.10 2013-11-16 23:48:31-08 - - $
d49 2
a50 1
   if(this->rear == this->front){
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.9 2013-11-16 23:46:21-08 - - $
d43 1
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.8 2013-11-16 23:45:50-08 - - $
d63 1
a63 1
};
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.7 2013-11-16 23:45:06-08 - - $
d63 1
a63 1
}
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.6 2013-11-16 23:44:17-08 - - $
a63 1

@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.5 2013-11-16 23:44:03-08 - - $
d59 1
a59 1
   if(this->front == NULL)
d61 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.4 2013-11-16 23:43:35-08 - - $
d53 1
a53 1
      free (remover)
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.3 2013-11-16 23:43:20-08 - - $
d52 1
a52 1
      this->front = front->link;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.2 2013-11-16 23:39:50-08 - - $
d51 1
a51 1
      queue_node remover = this->front;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.1 2013-11-16 23:38:25-08 - - $
d47 2
a48 3
   if(this->front == NULL){
      return this;
   } else if(this->rear == this->front){
d55 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.9 2013-05-01 13:22:44-07 - - $
d24 1
a24 1
   queue = malloc(sizeof(struct queue));
@
