head	1.9;
access;
symbols;
locks;
comment	@ * @;


1.9
date	2013.11.04.00.07.18;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.11.03.23.55.20;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.11.03.23.55.03;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.11.03.23.45.36;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.11.03.23.44.15;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.11.03.23.43.49;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.11.03.23.42.58;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.11.03.23.39.21;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.11.03.23.34.52;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: list4.c,v 1.8 2013-11-03 15:55:20-08 - - $

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct node node;
struct node {
   char *word;
   node *link;
};

int main (int argc, char **argv) {
   node *head = NULL;
   for (int argi = 0; argi < 5; ++argi) {
      node *node = malloc (sizeof (struct node));
      assert (node != NULL);
      node->word = argv[argi];
      node->link = head;
      head = node;
   }
   node *printed = head;
   for (node *curr = head; curr->link != NULL; curr = curr->link) {
      printf ("%p->node {word=%p->[%s], link=%p}\n",
              curr, curr->word, curr->word, curr->link);
   }
   while (printed != NULL){
      node *delete = printed;
      printed = printed->link;
      free (delete);
   }
   return EXIT_SUCCESS;
}
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.7 2013-11-03 15:55:03-08 - - $
d32 1
a32 1
   return 9;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.6 2013-11-03 15:45:36-08 - - $
d29 1
a29 1
      printed = printed.link;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.5 2013-11-03 15:44:15-08 - - $
d22 1
d27 5
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.4 2013-11-03 15:43:49-08 - - $
a25 1
   free (head);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.3 2013-11-03 15:42:58-08 - - $
a26 3
   for (int argi = 0; argi < argc; ++argi) {
      free (argv[argi]);
   }
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.2 2013-11-03 15:39:21-08 - - $
d27 1
a27 1
   for (int argi = 0; argi < 5; ++argi) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.1 2013-11-03 15:34:52-08 - - $
d27 3
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: list3.c,v 1.5 2013-11-03 15:30:32-08 - - $
d26 1
@
